##Git는 파일을 업로드해서 나의 발전 과정을 낱낱이 공개할 수 있는 성장 blog

##Git가 파일 변경사항을 확인하는 법
#Working Directory: VSC로 파일 수정 후 저장->이곳에 저장, Git는 아직 커밋할 준비가 되지 않았다고 판단

#Staging Area: Git에 업로드 하기 전 준비 단계,
#Git add .를 실행하면 커밋할 준비가 된 상태, 파일을 Staging Area에 저장한다.
#다만, 선택적으로 커밋하고 싶다면, Git add 파일명

#Local Repository: Local Disk로서 mlp-from-scratch 폴더는 현재 로컬디스크-사용자-user 내에 위치하므로,
#프롬프트에서 기본값이 "C:\Users\user\mlp-from-scratch>"로 표현되는 것
#git commit 명령어 실행 시, Staging Area의 변경 내용이 이곳에 영구 저장(커밋 메시지는 변경된 내용 요약)

#Remote Repository(Github): Local과는 달리 인터넷에 업로드되어 공유될 수 있는 저장소


##파일 생성
#1. 파일을 생성할 폴더 지정 "cd mlp-from-scratch"
#2. 이미 있는 Git Repo를 재실행 "Git init"
#3. 파일 생성 'touch "How to Use GIt"'
#4. 파일 변경 후 저장
#5. Staging Area에 업로드 "Git add ."
#6. Staging Area에 업로드 되었는지 확인 "Git Status"

#7. Local Repository에 어떤 변경사항이 추가되었는지 요약해서 커밋하기(커밋이란: 변경된 파일들을 하나의 묶음으로 Local Repository에 저장하는 것) 
#"Git commit -m 'Day2 Github 기본 사용법 인지'"

#8. main으로 local repository 이름 설정 "git branch -M main"
#git branch를 먼저 실행하는 이유: 앞으로 Local Repository에 저장될 파일들의 브랜치 이름을 통일하기 위해서

#9. git remote: 원격저장소와 관련된 작업을 진행한다./ add 이름 <URL>: URL에 새로운 원격저장소를 추가하는데, 이름이 "이름"인 것
# "git remote add origin https://github.com/hyeonhan-coder/mlp-from-scratch"

#10. 업로드 "git push -u 원격저장소 이름 로컬저장소 이름"
#-u는 로컬브랜치가 원격 브랜치를 추적하도록 설정

#-m, -M, -u는 각각 어떤 것인가 -m은 message 남긴다는 것, -M은 기존 브랜치 이름이 정해지지 않았다면 설정, 있더라도 변경
#gi